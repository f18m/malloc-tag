name: main CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    # install deps
    - uses: actions/checkout@v3
    - name: install debian-packaged dependencies
      run: sudo apt install -y jq clang-format graphviz libgoogle-perftools-dev libunwind-dev libgtest-dev

    - uses: actions/checkout@v3
    - name: install pypi-packaged dependencies
      run: sudo pip3 install graphviz build

    - name: build malloc-tag
      run: make all
    - name: check formatting
      run: make format_check


    # IMPORTANT: steps taken from https://github.com/itamarst/gha-upload-cores
    # Upload the binary, which we will need to debug the core
    - name: enable coredumping
      run: |
        sudo mkdir /cores
        sudo chmod 777 /cores
        # Core filenames will be of the form executable.pid.timestamp:
        sudo bash -c 'echo "/cores/%e.%p.%t" > /proc/sys/kernel/core_pattern'

    # now run C++ unit tests
    - name: run unit tests
      run: |
        # Allow core dumps
        ulimit -c unlimited
        make cpp_tests

    # now run examples to check they are still up to date and working
    - name: run basic example
      run: |
        # Allow core dumps
        ulimit -c unlimited
        # run the example
        make minimal_example
    - name: run multithread example
      run: |
        # Allow core dumps
        ulimit -c unlimited
        # run the example
        make multithread_example
    - name: run tcmalloc example
      run: |
        # Allow core dumps
        ulimit -c unlimited
        # run the example
        make tcmalloc_example

    # coredump collection to help debug failures inside the CI
    - uses: actions/upload-artifact@v3
      if: ${{ failure() }}  # Run only if something went wrong
      with:
        name: coredump
        path: |
          /cores
          ./examples/multithread/multithread
          ./examples/minimal/minimal
          ./src/libmalloc_tag.so*

    # test Python tools
    - name: set python path
      run: |
        PWD=$(pwd)
        echo "PYTHONPATH=$PWD/tools" >> $GITHUB_ENV
    - name: run python integration tests
      run: |
        make python_tests

    # finally test Python packaging
    - name: package the pypi
      run: |
        cd tools && python3 -m build
